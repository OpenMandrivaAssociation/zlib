--- zlib-1.2.8/inffast.c.0005~	2013-03-25 06:47:59.000000000 +0100
+++ zlib-1.2.8/inffast.c	2014-06-30 22:22:13.978664433 +0200
@@ -21,6 +21,7 @@
    - Pentium III (Anderson)
    - M68060 (Nikl)
  */
+#define POSTINC
 #ifdef POSTINC
 #  define OFF 0
 #  define PUP(a) *(a)++
@@ -29,6 +30,25 @@
 #  define PUP(a) *++(a)
 #endif
 
+#define mcpy(dest, src, n) \
+    if(labs(dest-src) > n) { \
+        memcpy(dest+OFF, src+OFF, n); \
+        dest += n; src += n; n = 0; \
+    } else { \
+        while (n > 2) { \
+            PUP(dest) = PUP(src); \
+            PUP(dest) = PUP(src); \
+            PUP(dest) = PUP(src); \
+            n -= 3; \
+        } \
+        if (n) { \
+            PUP(dest) = PUP(src); \
+            if (n > 1) \
+                PUP(dest) = PUP(src); \
+        } \
+    }
+
+
 /*
    Decode literal, length, and distance codes and write out the resulting
    literal and match bytes until either not enough input or output is
@@ -253,31 +273,11 @@ unsigned start;         /* inflate()'s s
                             from = out - dist;  /* rest from output */
                         }
                     }
-                    while (len > 2) {
-                        PUP(out) = PUP(from);
-                        PUP(out) = PUP(from);
-                        PUP(out) = PUP(from);
-                        len -= 3;
-                    }
-                    if (len) {
-                        PUP(out) = PUP(from);
-                        if (len > 1)
-                            PUP(out) = PUP(from);
-                    }
+                    mcpy(out, from, len);
                 }
                 else {
                     from = out - dist;          /* copy direct from output */
-                    do {                        /* minimum length is three */
-                        PUP(out) = PUP(from);
-                        PUP(out) = PUP(from);
-                        PUP(out) = PUP(from);
-                        len -= 3;
-                    } while (len > 2);
-                    if (len) {
-                        PUP(out) = PUP(from);
-                        if (len > 1)
-                            PUP(out) = PUP(from);
-                    }
+                    mcpy(out, from, len);
                 }
             }
             else if ((op & 64) == 0) {          /* 2nd level distance code */
